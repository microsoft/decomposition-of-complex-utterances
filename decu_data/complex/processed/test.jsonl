{"steps": [{"step_index": 0, "step": "Find all events"}, {"step_index": 1, "step": "Filter list of events s1 to only events organized by me."}, {"step_index": 2, "step": "Find the event with the most recent created time from the list of events s2"}, {"step_index": 3, "step": "Find all meetings created after the event s3"}, {"step_index": 4, "step": "Decline all meetings from the list of events in s4"}], "utterance": "Decline any meetings that were created after I sent my last invite earlier today", "plans": ["val s1 = findEvents0", "val s2 = s1.filter(x => x.organizerIs(me))", "val s3 = max(s2, x => x.created)", "val s4 = findEvents(queryAt(after(s3.created)))", "val s5 = s4.map(x => respond(x, withResponse(ResponseStatusType.declined)))"], "datum_id": "d129", "utterance_id": "d129", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find meetings at 10 pm tomorrow"}, {"step_index": 1, "step": "If the list of events s1 is empty create an event titled \"sync\" with Prerita"}], "utterance": "If I'm free at 10 pm tomorrow, schedule a sync with Prerita", "plans": ["val s1 = findEvents(queryAt(10.pm on tomorrow))", "val s2 = Option.when(s1.isEmpty){createEvent(called(\"sync\") and with_(\"Prerita\"))}"], "datum_id": "d142", "utterance_id": "d142", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event with my manager in the next 5 days"}, {"step_index": 1, "step": "Check if there is 1 or more events in list s1"}, {"step_index": 2, "step": "If s2 is true, make the first event in the list of events s1 to start tomorrow"}, {"step_index": 3, "step": "Find the events with my manager after 5 days"}, {"step_index": 4, "step": "If s2 is true and size of list s4 is at least 1 then decline the first event in the list of events s4"}], "utterance": "Find the first meeting with manager. If it is happening in the next 5 days, update it to happen tomorrow, but if it isn't, then decline it", "plans": ["val s1 = findEvents(with_(thePerson(me).manager) and queryAt(before(today + 5.days)))", "val s2 = s1.size >= 1", "val s3 = Option.when(s2){modifyEvent(s1.head, startsAt(tomorrow))}", "val s4 = findEvents(with_(thePerson(me).manager) and queryAt(after(today + 5.days)))", "val s5 = Option.when(s2 && s4.size >= 1){respond(s4.head, withResponse(ResponseStatusType.declined))}"], "datum_id": "d149", "utterance_id": "d149", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Create a list to iterate through each day of the week"}, {"step_index": 1, "step": "Filter the list s1 to include only the days where there are more than 4 events found on that day"}, {"step_index": 2, "step": "For each day in the list s2, create an event with the subject \"vacation time\" on that day"}], "utterance": "Can you schedule some vacation time on days next week where I have more than 4 meetings?", "plans": ["val s1 = List[DayOfWeek](Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)", "val s2 = s1.filter(x => findEvents(queryAt(x /& (next[Interval[Date]] and isWeek))).size > 4)", "val s3 = s2.map(x => createEvent(called(\"vacation time\") and createAt(x /& (next[Interval[Date]] and isWeek))))"], "datum_id": "d15annotator1", "utterance_id": "d15", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events at 3 pm mountain time"}, {"step_index": 1, "step": "Decline each event in the list s3"}, {"step_index": 2, "step": "Create an event at 3 pm mountain time"}], "utterance": "Make me a meeting at 3 pm mountain time and refuse any meetings that happen at the same time", "plans": ["val s1 = findEvents(queryAt(3.pm inZone TimeZone(\"MST\")))", "val s2 = s1.map(x => respond(x, withResponse(ResponseStatusType.declined)))", "val s3 = createEvent(createAt(3.pm inZone TimeZone(\"MST\")))"], "datum_id": "d16annotator1", "utterance_id": "d16", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Create a list to iterate through each day of the week"}, {"step_index": 1, "step": "Filter list of days s1 to include only the days where there are fewer than 4 meetings found on that day"}, {"step_index": 2, "step": "For each day in list of days s2 create a meeting with Ryan and Smith on that day"}], "utterance": "Add a meeting with Ryan and Smith on each day next week where I have fewer than 4 meetings.", "plans": ["val s1 = List[DayOfWeek](Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)", "val s2 = s1.filter(x => findEvents(queryAt(x /& (next[Interval[Date]] and isWeek))).size < 4)", "val s3 = s2.map(x => createEvent(with_(\"Ryan\") and with_(\"Smith\") and createAt(x /& (next[Interval[Date]] and isWeek))))"], "datum_id": "d17", "utterance_id": "d17", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab Kevin's reports"}, {"step_index": 1, "step": "Create a one-on-one meeting with each person in list of persons s1"}], "utterance": "Create 1:1's with all of Kevin's reports", "plans": ["val s1 = thePerson(\"Kevin\").directReports", "val s2 = s1.map(x => createEvent(isOneOnOne and with_(x)))"], "datum_id": "d183", "utterance_id": "d183", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find 1/1 meetings this month"}, {"step_index": 1, "step": "Filter the events in the list s1 to include only those where the other attendee has a job title of \"PM\""}, {"step_index": 2, "step": "Update each event in the list s2 to be called \"project sync\""}], "utterance": "Rename all the 1/1 meetings I have with a PM this month to be called project sync", "plans": ["val s1 = findEvents(queryAt(`this`[Interval[Date]] and isMonth) and isOneOnOne)", "val s2 = s1.filter( x => getPersonFromAttendee(x.attendees.otherPeople.head).jobTitle == Some(\"PM\"))", "val s3 = s2.map(x => modifyEvent(x, called(\"project sync\")))"], "datum_id": "d18annotator1", "utterance_id": "d18", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find meetings on calendar called \"project sync\" this week"}, {"step_index": 1, "step": "Modify each event in list of events s1 to include Kenneth"}], "utterance": "Add Kenneth to all the project sync meetings this week.", "plans": ["val s1 = findEvents(called(\"project sync\") and queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = s1.map(x => modifyEvent(x, with_(\"Kenneth\")))"], "datum_id": "d205", "utterance_id": "d205", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all meetings this week"}, {"step_index": 1, "step": "Change the duration of all meetings in events list s1 to be 5 minutes less but start at the same time as before"}], "utterance": "Change the end times for all my meetings this week to end earlier by 5 minutes.", "plans": ["val s1 = findEvents(queryAt(thisWeek))", "val s2 = s1.map(x => modifyEvent(x, lastsFor(x.duration - 5.minutes) and startsAt(x.start.local.time)))"], "datum_id": "d206", "utterance_id": "d206", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events with Abby this week"}, {"step_index": 1, "step": "Find events with Dan and without Abby this week"}, {"step_index": 2, "step": "Set each event in list of events s1 to start 5 minutes later"}, {"step_index": 3, "step": "Set each event in list of events s2 to start 5 minutes later"}], "utterance": "Change the times for all my meetings with Abby and Dan this week to start 5 minutes later", "plans": ["val s1 = findEvents(with_(\"Abby\") and queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = findEvents(with_(\"Dan\") and not(with_(\"Abby\")) and queryAt(`this`[Interval[Date]] and isWeek))", "val s3 = s1.map(x => modifyEvent(x, startsAt(x.start.local.time + 5.minutes)))", "val s4 = s2.map(x => modifyEvent(x, startsAt(x.start.local.time + 5.minutes)))"], "datum_id": "d208", "utterance_id": "d208", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events called \"project sync meeting\" that happen on a Wednesday"}, {"step_index": 1, "step": "Grab the first event from the list of events s1"}, {"step_index": 2, "step": "Find the event called project sync meeting on Wednesday right after the event s2"}, {"step_index": 3, "step": "Update the event s3 to start five minutes later"}], "utterance": "Can we have a 5 minute break in between the two project sync meetings on Wednesday if they happen back to back?\u00a0", "plans": ["val s1 = findEvents(called(\"project sync meeting\") and queryAt(Wednesday))", "val s2 = s1.head", "val s3 = theEvent(called(\"project sync meeting\") and queryAt(Wednesday) and rightAfter(s2))", "val s4 = modifyEvent(s3, startsAt(s3.start + 5.minutes))"], "datum_id": "d218", "utterance_id": "d218", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get Kevin's reports"}, {"step_index": 1, "step": "Check if the size of the list s1 is 5 or less"}], "utterance": "I like Kevin. Does he have 5 people or less as his reports?", "plans": ["val s1 = thePerson(\"Kevin\").directReports", "val s2 = s1.size <= 5"], "datum_id": "d21annotator1", "utterance_id": "d21", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get Jeff's reports"}, {"step_index": 1, "step": "For each person in the list of persons s1, find all the events the person is attending and decline those events"}], "utterance": "Can you decline all the meetings where at least one attendee reports to Jeff.", "plans": ["val s1 = thePerson(\"Jeff\").directReports", "val s2 = s1.map(x => findEvents(with_(x)).map(z => respond(z, withResponse(ResponseStatusType.declined))))"], "datum_id": "d22", "utterance_id": "d22", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my meeting with John tomorrow"}, {"step_index": 1, "step": "Check if John has accepted event s1"}, {"step_index": 2, "step": "If s2 is not true then add John's manager to the event s1"}], "utterance": "Check if John has accepted our meeting tomorrow and if not then add John's manager to the call", "plans": ["val s1 = theEvent(with_(\"John\") and queryAt(tomorrow))", "val s2 = s1.attendees.isAttending(thePerson(\"John\"))", "val s3 = Option.when(!s2){modifyEvent(s1, with_(thePerson(\"John\").manager))}"], "datum_id": "d227", "utterance_id": "d227", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my events this week with Jeff"}, {"step_index": 1, "step": "Filter that events list s1 to include only the events in which there is at least one event with Tom on the same day as the event"}, {"step_index": 2, "step": "Decline each event in that list of events s2"}], "utterance": "Decline any meeting this week with Jeff if I have a meeting with Tom on the same day.", "plans": ["val s1 = findEvents(with_(\"Jeff\") and queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = s1.filter(x => findEvents(with_(\"Tom\") and queryAt(x.start.local.date)).nonEmpty)", "val s3 = s2.map(x => respond(x, withResponse(ResponseStatusType.declined)))"], "datum_id": "d22a", "utterance_id": "d22a", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all one on ones this week excluding Thursday"}, {"step_index": 1, "step": "If the list of events s1 is not empty then move each event in the list s1 to Thursday"}], "utterance": "Move all my one on ones this week to Thursday.", "plans": ["val s1 = findEvents(queryAt(`this`[Interval[Date]] and isWeek) and isOneOnOne and not(queryAt(Thursday)))", "val s2 = Option.when(s1.nonEmpty){s1.map(x => modifyEvent(x, startsAt(Thursday)))}"], "datum_id": "d239", "utterance_id": "d239", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event with Hao this week"}, {"step_index": 1, "step": "Update the event s1 to add Hao and remove Ben"}], "utterance": "If I have a meeting with Hao this week, change it to be with Ben instead.", "plans": ["val s1 = theEvent(with_(\"Hao\") and queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = modifyEvent(s1, with_(\"Ben\") and not(with_(\"Hao\")))"], "datum_id": "d249Annotator4", "utterance_id": "d249", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Identify Jack"}, {"step_index": 1, "step": "Find meetings with Jack this week"}, {"step_index": 2, "step": "Get the reports of manager of s2 excluding s2"}, {"step_index": 3, "step": "If the list of events s2 is not empty, then create a 1:1 event with each person in the list s3"}], "utterance": "If I have a meeting with Jack this week, set a 1/1 meeting with each person who shares the same manager as Jack's", "plans": ["val s1 = thePerson(\"Jack\")", "val s2 = findEvents(with_(s1) and queryAt(`this`[Interval[Date]] and isWeek))", "val s3 = s1.manager.directReports.filter(x => x != s1)", "val s4 = Option.when(s2.nonEmpty){s3.map(x => createEvent(isOneOnOne and with_(x)))}"], "datum_id": "d255", "utterance_id": "d255", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Look for the event with subject \"discuss the tick count of our servers\""}, {"step_index": 1, "step": "Check how many people accepted the event s1"}], "utterance": "How many people are set to attend the meeting where we discuss the tick count of our servers", "plans": ["val s1 = theEvent(called(\"discuss the tick count of our servers\"))", "val s2 = s1.attendees.withResponse(ResponseStatusType.accepted).size"], "datum_id": "d27", "utterance_id": "d27", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find meetings with Ben on Monday"}, {"step_index": 1, "step": "Find meetings with Charlie on Wednesday"}, {"step_index": 2, "step": "Check if list of events s1 is non-empty or list of events s2 is non-empty"}], "utterance": "Do I have a meeting with Ben on Monday or with Charlie on Wednesday?", "plans": ["val s1 = findEvents(with_(\"Ben\") and queryAt(Monday))", "val s2 = findEvents(queryAt(Wednesday) and with_(\"Charlie\"))", "val s3 = s1.nonEmpty || s2.nonEmpty"], "datum_id": "d29", "utterance_id": "d29", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Describe duration of time from now until next Meeting"}], "utterance": "how long do i have before my next appointment?", "plans": ["val s1 = durationFromNow(theEvent(next[Event]).start)"], "datum_id": "d294", "utterance_id": "d294", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"staff\""}, {"step_index": 1, "step": "Find the event called \"board\""}, {"step_index": 2, "step": "Identify the end time of s1"}, {"step_index": 3, "step": "Identify the start time of s2"}, {"step_index": 4, "step": "Identify the duration of time difference in between s3 and s4"}], "utterance": "how long do i have between the staff and board meetings?", "plans": ["val s1 = theEvent(called(\"staff\"))", "val s2 = theEvent(called(\"board\"))", "val s3 = s1.end", "val s4 = s2.start", "val s5 = durationBetweenInstants(s3, s4)"], "datum_id": "d298", "utterance_id": "d298", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my reports"}, {"step_index": 1, "step": "Filter the list s1 so that it only contains reports who do not already have a 1/1 call with me this week"}, {"step_index": 2, "step": "schedule a 1/1 with each person in the list s2"}], "utterance": "For my reports who don\u2019t already have a 1/1 call with me this week, schedule a 1/1 with each one of them.", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.filter(x => findEvents(with_(x) and isOneOnOne and queryAt(`this`[Interval[Date]] and isWeek)).isEmpty)", "val s3 = s2.map(x => createEvent(with_(x) and isOneOnOne))"], "datum_id": "d2Annotator4", "utterance_id": "d2", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Create a list of days of the week"}, {"step_index": 1, "step": "Filter the list of days s1 to include only those days in which there is more than 1 event found"}, {"step_index": 2, "step": "Return the size of the list of days in s2"}], "utterance": "how many days this week do i have more than 1 meeting scheduled.", "plans": ["val s1 = List[DayOfWeek](Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday)", "val s2 = s1.filter(x => findEvents(queryAt(x /& (`this`[Interval[Date]] and isWeek))).size > 1)", "val s3 = s2.size"], "datum_id": "d303", "utterance_id": "d303", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the meeting with Jane"}, {"step_index": 1, "step": "Find the meeting with Smith"}, {"step_index": 2, "step": "Update the event s1 to use the start and end time of the event s2"}, {"step_index": 3, "step": "Update the event s2 to use the start and end time of the event s1"}], "utterance": "Exchange the timing of my meetings with Jane and Smith", "plans": ["val s1 = theEvent(with_(\"Jane\"))", "val s2 = theEvent(with_(\"Smith\"))", "val s3 = modifyEvent(s1, createAt(s2.start) and endsAt(s2.end))", "val s4 = modifyEvent(s2, startsAt(s1.start) and endsAt(s1.end))"], "datum_id": "d31annotator1", "utterance_id": "d31", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the \"project sync\" event next week"}, {"step_index": 1, "step": "Create an event with the same attendees from event s1 and include David Smith"}], "utterance": "Split my project sync call next week into two events with the same attendees, but in the second one, invite David Smith also.", "plans": ["val s1 = theEvent(called(\"project sync\") and queryAt(next[Interval[Date]] and isWeek))", "val s2 = createEvent(with_(s1.attendees) and with_(\"David Smith\"))"], "datum_id": "d33", "utterance_id": "d33", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events on Friday evening"}, {"step_index": 1, "step": "Delete each event in the list of events s1"}, {"step_index": 2, "step": "Create an event called \"i need catch the amtrak to san francisco\" at 6 pm on Friday night"}], "utterance": "I need to clear whatever i have on friday evening and put an event that i need catch the amtrak to san francisco at 6 PM the same night.", "plans": ["val s1 = findEvents(queryAt(evening on Friday))", "val s2 = s1.map(x => deleteEvent(x))", "val s3 = createEvent(called(\"i need catch the amtrak to san francisco\") and createAt(6.pm on Friday))"], "datum_id": "d334", "utterance_id": "d334", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all events on Monday"}, {"step_index": 1, "step": "Find all events on Tuesday"}, {"step_index": 2, "step": "Update each event in events list s1 to happen on Tuesday"}, {"step_index": 3, "step": "Update each event in events list s2 to happen on Monday"}], "utterance": "I need to swap the calls that are on Monday and Tuesday.", "plans": ["val s1 = findEvents(queryAt(Monday))", "val s2 = findEvents(queryAt(Tuesday))", "val s3 = s1.map( x => modifyEvent(x, startsAt(Tuesday)) )", "val s4 = s2.map( x => modifyEvent(x, startsAt(Monday)) )"], "datum_id": "d35", "utterance_id": "d35", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Change the duration of the team sync call today to 2 hours"}, {"step_index": 1, "step": "Create an event with the same title as the event s1 10 days from now"}], "utterance": "Change the duration of the team sync call today to two hours, and schedule an event with identical title 10 days from now.", "plans": ["val s1 = modifyEvent(theEvent(called(\"team sync call\") and queryAt(today)), lastsFor(2.hours))", "val s2 = createEvent(createAt(today + 10.days) and called(\"team sync call\"))"], "datum_id": "d357", "utterance_id": "d357", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my one on one meetings this week"}, {"step_index": 1, "step": "For each event in list of events s1 create new one on one with the same start time, end time, and other attendee as the event but for the following week"}], "utterance": "Loop around all my 1/1 meetings this week so that they also happen next week.", "plans": ["val s1 = findEvents(isOneOnOne and queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = s1.map(x => createEvent(isOneOnOne and startsAt(x.start + 1.weeks) and endsAt(x.end + 1.weeks) and with_(x.attendees.otherPeople)))"], "datum_id": "d36", "utterance_id": "d36", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events from 3 to 5 pm on Monday"}, {"step_index": 1, "step": "If the list of events s1 is empty, then schedule an event called grocery shopping from 3 to 5 pm on Monday"}], "utterance": "if i don't have any conflicts, schedule grocery shopping for 3pm to 5pm on monday.", "plans": ["val s1 = findEvents(queryAt(timeInterval(3.pm, 5.pm) on Monday))", "val s2 = Option.when(s1.isEmpty){createEvent(called(\"grocery shopping\") and createAt(timeInterval(3.pm, 5.pm) on Monday))}"], "datum_id": "d369", "utterance_id": "d369", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Query for how many emails were received on last Monday"}], "utterance": "Can you tell me how many emails I received on Monday?", "plans": ["val s1 = findEmails(messageSentAt(last[Date] /& Monday)).size"], "datum_id": "d37", "utterance_id": "d37", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my event called project sync next month"}, {"step_index": 1, "step": "Get the attendees of the event s1"}, {"step_index": 2, "step": "Get the person Tom"}, {"step_index": 3, "step": "If the list of persons s2 does not contain the person s3, update the event s1 to include the person s3"}], "utterance": "If Tom was not added to the invite for project sync next month, then add him", "plans": ["val s1 = theEvent(called(\"project sync\") and queryAt(next[Interval[Date]] and isMonth))", "val s2 = s1.attendees.all.map(x => getPersonFromAttendee(x))", "val s3 = thePerson(\"Tom\")", "val s4 = Option.when(!(s2.contains(s3))){modifyEvent(s1, with_(s3))}"], "datum_id": "d370", "utterance_id": "d370", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events on the 6th"}, {"step_index": 1, "step": "Find events on the 7th"}, {"step_index": 2, "step": "If the list of events s1 is not empty then modify each event in the list s2 to happen one day earlier"}, {"step_index": 3, "step": "If the list of events s1 is not empty, modify each event in the list s1 to happen on the 7th"}], "utterance": "if i have a meeting schedule for the 6th, please move it to the 7th and push any other meetings i've got on the 7th one day earlier.", "plans": ["val s1 = findEvents(queryAt(6))", "val s2 = findEvents(queryAt(7))", "val s3 = Option.when(s1.nonEmpty){s2.map(x => modifyEvent(x, startsAt(x.start - 1.days)))}", "val s4 = Option.when(s1.nonEmpty){s1.map(x => modifyEvent(x, startsAt(7)))}"], "datum_id": "d371", "utterance_id": "d371", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab the person Jack"}, {"step_index": 1, "step": "Create an meeting this week with person s1"}, {"step_index": 2, "step": "Create a \"followup\" next week with person s1 at the same time as meeting s2"}], "utterance": "I need a meeting this week with Jack. Then set up a followup meeting next week with him at the same time.", "plans": ["val s1 = thePerson(\"Jack\")", "val s2 = createEvent(with_(s1) and createAt(`this`[Interval[Date]] and isWeek))", "val s3 = createEvent(called(\"followup\") and with_(s1) and createAt(s2.start.local.time on (`next`[Interval[Date]] and isWeek)))"], "datum_id": "d383", "utterance_id": "d383", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my meeting at noon"}, {"step_index": 1, "step": "Plus the end time of s1 by 40 minutes"}, {"step_index": 2, "step": "Grab the start time of my next meeting after s1"}, {"step_index": 3, "step": "Compare if the event end time s2 is later than the event start time s3"}], "utterance": "if my meeting at noon is delayed by 40 mins, will I be late for my next meeting?", "plans": ["val s1 = theEvent(queryAt(noon))", "val s2 = s1.end + 40.minutes", "val s3 = theEvent(next[Event] and after(s1)).start", "val s4 = s2 > s3"], "datum_id": "d389", "utterance_id": "d389", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Create a meeting next Monday, that lasts for 30 minutes"}, {"step_index": 1, "step": "Create a meeting next Monday, that lasts for 15 minutes longer than s1"}, {"step_index": 2, "step": "Create a meeting next Monday, that lasts for 15 minutes longer than s2"}, {"step_index": 3, "step": "Create a meeting next Monday, that lasts for 15 minutes longer than s3"}, {"step_index": 4, "step": "Create a meeting next Monday, that lasts for 15 minutes longer than s4"}], "utterance": "Schedule 5 meetings on next Monday, that are each 15 minutes longer than the previous one, starting with 30 minutes.", "plans": ["val s1 = createEvent(createAt(next[Date] /& Monday) and lastsFor(30.minutes))", "val s2 = createEvent(createAt(next[Date] /& Monday) and lastsFor(s1.duration + 15.minutes))", "val s3 = createEvent(createAt(next[Date] /& Monday) and lastsFor(s2.duration + 15.minutes))", "val s4 = createEvent(createAt(next[Date] /& Monday) and lastsFor(s3.duration + 15.minutes))", "val s5 = createEvent(createAt(next[Date] /& Monday) and lastsFor(s4.duration + 15.minutes))"], "datum_id": "d39", "utterance_id": "d39", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events from Tuesday morning to Thursday night"}, {"step_index": 1, "step": "describe any meetings found from list of events s1"}], "utterance": "If I go to seattle on tuesday morning and return on Thursday night, what will i have to reschedule any meeting?", "plans": ["val s1 = findEvents(queryAt(fromDateTimeToDateTime(Tuesday, morning, Thursday, night)))", "val s2 = s1"], "datum_id": "d397", "utterance_id": "d397", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all meetings on calendar"}, {"step_index": 1, "step": "Filter the list of events s1 to include only the events with 1 other attendee"}, {"step_index": 2, "step": "For each event the list s2 update the subject of the meeting to be \"1/1 with \" + other attendee's name"}], "utterance": "Update the meeting subject of all my meetings with only one attendee as 1/1 with corresponding person", "plans": ["val s1 = findEvents0", "val s2 = s1.filter(x => x.attendees.otherPeople.size == 1)", "val s3 = s2.map(x => modifyEvent(x, called(\"1/1 \" + x.attendees.otherPeople(0).nameAndEmail.name.get)))"], "datum_id": "d3annotator1", "utterance_id": "d3", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my event at noon"}, {"step_index": 1, "step": "Reduce the duration of event s1 by 15 minutes"}, {"step_index": 2, "step": "Get the end time of event s2"}, {"step_index": 3, "step": "Create an event that starts at the end of event s3 that lasts for 15 minutes"}], "utterance": "I'd like to divide the meeting at noon in two, so split off the last fifteen minutes as a separate event.", "plans": ["val s1 = theEvent(queryAt(noon))", "val s2 = modifyEvent(s1, lastsFor(s1.duration - 15.minutes))", "val s3 = s2.end.local.time", "val s4 = createEvent(createAt(s3) and lastsFor(15.minutes))"], "datum_id": "d40", "utterance_id": "d40", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events with jerry skinner this week"}, {"step_index": 1, "step": "If list of events s1 is empty, schedule a lunch with jerry skinner for Friday at 1 pm"}], "utterance": "If a meeting with jerry skinner isn't there on my schedule this week, please schedule a lunch with him for Friday at 1 pm.", "plans": ["val s1 = findEvents(with_(\"jerry skinner\") and queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = Option.when(s1.isEmpty){createEvent(called(\"lunch\") and with_(\"jerry skinner\") and createAt(1.pm on Friday))}"], "datum_id": "d401", "utterance_id": "d401", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find jesse rosenfield's manager"}, {"step_index": 1, "step": "Find david crim's manager"}, {"step_index": 2, "step": "Check if person s1 is same as person s2"}], "utterance": "Do jesse rosenfield and david crim report to the same manager?", "plans": ["val s1 = thePerson(\"jesse rosenfield\").manager", "val s2 = thePerson(\"david crim\").manager", "val s3 = s1 == s2"], "datum_id": "d405", "utterance_id": "d405", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find emails from last night containing a file"}], "utterance": "How many new emails did I get last night that contained a file.", "plans": ["val s1 = findEmails(messageSentAt(night on yesterday) and messageHasAttachments(true))"], "datum_id": "d407", "utterance_id": "d407", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Query for the event that starts at 3pm"}, {"step_index": 1, "step": "Establish an event called \"Core\" and with Jimmy that has the same start time and end time as the event s1"}, {"step_index": 2, "step": "Delete the event s1"}], "utterance": "I need you to delete the meeting I have at 3 pm and replace it with the Core with Jimmy.", "plans": ["val s1 = theEvent(queryAt(3.pm))", "val s2 = createEvent(called(\"Core\") and with_(\"Jimmy\") and createAt(s1.start) and endsAt(s1.end))", "val s3 = deleteEvent(s1)"], "datum_id": "d409", "utterance_id": "d409", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the LT-meeting"}, {"step_index": 1, "step": "If Isaac is not attending the event s1, create a 1:1 with him tonight"}], "utterance": "If Issac cannot make it to the LT-meeting, schedule some 1:1 time with him tonight", "plans": ["val s1 = theEvent(called(\"LT-meeting\"))", "val s2 = Option.when(!(s1.attendees.isAttending(thePerson(\"Isaac\")))){createEvent(isOneOnOne and with_(\"Isaac\") and createAt(tonight))}"], "datum_id": "d414", "utterance_id": "d414", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Set my status to out of office, and include in the description \"I am on vacation and expected to be back on March 9\""}], "utterance": "I forgot to set my status. Can you set my status to let the team know I am on Vacation and expected back March 9.", "plans": ["val s1 = setStatus(setStatusToWithMessage(UserStatus.OutOfOffice, \"I am on Vacation and expected to be back on March 9\"))"], "datum_id": "d415", "utterance_id": "d415", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Check for events the rest of today"}, {"step_index": 1, "step": "If there are at least two events in the list s1, delete the second to last event"}], "utterance": "Of the remaining meetings today, can you delete the 2nd to last one?", "plans": ["val s1 = findEvents(queryAt(today))", "val s2 = Option.when(s1.size >= 2){deleteEvent(s1(s1.size - 2))}"], "datum_id": "d420", "utterance_id": "d420", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find emails about Elden Ring"}, {"step_index": 1, "step": "If list s1 has size greater than 0 then create a meeting next week called \"Elden Ring\" with my direct reports"}], "utterance": "If I have an email about an Elden Ring event, please create an event next week titled Elden Ring with all my reports.", "plans": ["val s1 = findEmails(messageBodyIs(\"Elden Ring\"))", "val s2 = Option.when(s1.size > 0){createEvent(createAt(`next`[Interval[Date]] and isWeek) and called(\"Elden Ring\") and with_(thePerson(me).directReports))}"], "datum_id": "d432", "utterance_id": "d432", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find any meetings called \"status update\" with all of my directs reports in the morning on any day this week"}, {"step_index": 1, "step": "If the list s1 is empty, then create an event called \"status update\" in the morning this week with my direct reports"}], "utterance": "On any day next week for which I don't currently have a morning status update meeting with my reports, please get one set up.", "plans": ["val s1 = findEvents(with_(thePerson(me).directReports) and called(\"status update\") and queryAt(morning on (next[Interval[Date]] and isWeek)))", "val s2 = Option.when(s1.isEmpty){createEvent(with_(thePerson(me).directReports) and called(\"status update\") and createAt(morning on (next[Interval[Date]] and isWeek)))}"], "datum_id": "d433", "utterance_id": "d433", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab my reports"}, {"step_index": 1, "step": "Grab the attendees of the Book Club meeting"}, {"step_index": 2, "step": "Create an event this afternoon with list of persons in s1 and list of persons in s2 and call it \"Expanding Book Club\""}], "utterance": "Add all my reports and the member list of the Book Club chat to a meeting this afternoon titled Expanding Book Club.", "plans": ["val s1 = thePerson(me).directReports", "val s2 = theEvent(called(\"Book Club\")).attendees.all", "val s3 = createEvent(createAt(afternoon on `this`[Date]) and with_(s1) and with_(s2) and called(\"Expanding Book Club\"))"], "datum_id": "d434", "utterance_id": "d434", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the 1/1 meeting with Nathaniel this week"}, {"step_index": 1, "step": "Determine if the event s1 has an attendee named Nathaniel whose timezone is PST"}, {"step_index": 2, "step": "if s2 is true then move the meeting an hour later. Else, move the meeting an hour earlier"}], "utterance": "If the 1/1 meeting with Nathaniel this week is with the Nathaniel who works in PST, then move it an hour later, or else move it an hour earlier.", "plans": ["val s1 = theEvent(isOneOnOne and queryAt(thisWeek) and with_(\"Nathaniel\"))", "val s2 = s1.attendees.all.map(at => getPersonFromAttendee(at)).filter(named(\"Nathaniel\")).filter(p => p.timeZone == TimeZone(\"PST\")).size > 0", "val s3 = if(s2){modifyEvent(s1, startsAt(s1.start + 1.hours))}else{modifyEvent(s1, startsAt(s1.start - 1.hours))}"], "datum_id": "d438", "utterance_id": "d438", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find meetings with my manager this afternoon"}, {"step_index": 1, "step": "Grab the size of the list of events s1 found"}, {"step_index": 2, "step": "If size s2 is more than 1 then create a unique list of attendees from all of the events list s1"}, {"step_index": 3, "step": "If size s2 is more than 1 then delete each event in events list s1"}, {"step_index": 4, "step": "If size s2 is more than 1 then create a new meeting with my manager this afternoon with the unique attendee list s3"}], "utterance": "If I have more than one meeting with my manager this afternoon, please merge them.", "plans": ["val s1 = findEvents(with_(thePerson(me).manager) and queryAt(afternoon on `this`[Date]))", "val s2 = s1.size", "val s3 = if(s2 > 1){s1.flatMap(x => x.attendees.otherPeople)}else{List.empty}", "val s4 = Option.when(s2 > 1){s1.map(x => deleteEvent(x))}", "val s5 = Option.when(s2 > 1){if(s3.nonEmpty){createEvent(with_(thePerson(me).manager) and with_(s3) and createAt(afternoon on `this`[Date]))}else{createEvent(with_(thePerson(me).manager) and createAt(afternoon on `this`[Date]))}}"], "datum_id": "d44", "utterance_id": "d44", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all emails with a message body containing \"Elden Ring\""}, {"step_index": 1, "step": "Find all chat messages with \"Elden Ring\" in the title"}, {"step_index": 2, "step": "Create a single list of recipients of all the emails in list s1"}, {"step_index": 3, "step": "Create a single list of recipients of all the chat messages in list s2"}, {"step_index": 4, "step": "Create an meeting called \"Elden Ring\", and invite recipients in list s3 and list s4"}], "utterance": "I need an event titled Elden Ring tomorrow. If anyone has reached out to me about Elden Ring via chat or email, please include them in the event.", "plans": ["val s1 = findEmails(messageBodyIs(\"Elden Ring\"))", "val s2 = findChatMessages(messageTitleIs(\"Elden Ring\"))", "val s3 = s1.flatMap(e => e.allRecipients)", "val s4 = s2.flatMap(e => e.toRecipients)", "val s5 = createEvent(called(\"Elden Ring\") and createAt(tomorrow) and with_(s3) and with_(s4))"], "datum_id": "d444", "utterance_id": "d444", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events with the title \"vacation\""}, {"step_index": 1, "step": "Delete each event in the list of events s1"}], "utterance": "Cross all my vacation events off my calendar, I need to juggle those around.", "plans": ["val s1 = findEvents(called(\"vacation\"))", "val s2 = s1.map(x => deleteEvent(x))"], "datum_id": "d445", "utterance_id": "d445", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab my manager"}, {"step_index": 1, "step": "Find my event on Friday afternoon"}, {"step_index": 2, "step": "Remove the person s1 from the event s2"}], "utterance": "Cross my manager off the attendee list for Friday afternoon's event.", "plans": ["val s1 = thePerson(me).manager", "val s2 = theEvent(queryAt(Friday on afternoon))", "val s3 = modifyEvent(s2, not(with_(s1)))"], "datum_id": "d446", "utterance_id": "d446", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find meeting with my manager on the 14th"}, {"step_index": 1, "step": "Grab the start date of event s1 and add 1 day to it"}, {"step_index": 2, "step": "Modify s1 to be on s2 and set the status of s1 to be out of office"}], "utterance": "Move my meeting with my manager on the 14th to the next day and set my status to be out of office during the meeting.", "plans": ["val s1 = theEvent((with_(thePerson(me).manager)) and queryAt(14))", "val s2 = s1.start.local.date + 1.days", "val s3 = modifyEvent(s1, createAt(s2) and withStatus(FreeBusyStatus.oof))"], "datum_id": "d449", "utterance_id": "d449", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Identify the number of chat messages recieved from Lisa about \"shiproom\""}, {"step_index": 1, "step": " Identify the number of emails recieved from Ned about \"shiproom\""}, {"step_index": 2, "step": "If s1 and s2 are both 0, create an event this afternoon with Lisa and Ned called \"shiproom\"."}], "utterance": "Do I have a chat message from Lisa about shiproom, or an an email from Ned about shiproom? If neither, then create an event with Ned and Lisa thia afternoon titled Shiproom.", "plans": ["val s1 = findChatMessages(messageWithSender(\"Lisa\") and messageTitleIs(\"shiproom\")).size", "val s2 = findEmails(messageWithSender(\"Ned\") and messageTitleIs(\"shiproom\")).size", "val s3 = Option.when(s1 == 0 && s2 == 0){createEvent(with_(\"Ned\") and with_(\"Lisa\") and createAt(afternoon on `this`[Date]) and called(\"Shiproom\"))}"], "datum_id": "d451", "utterance_id": "d451", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event next Monday"}, {"step_index": 1, "step": "Grab the attendees who did not repond to the event s1"}, {"step_index": 2, "step": "Filter list of attendees s2 to include only my manager"}, {"step_index": 3, "step": "If list of attendees s3 is not empty, delete the event s1"}], "utterance": "Did my manager ever respond to the meeting invite next Monday? If yes, no action is needed but otherwise I need that event deleted.", "plans": ["val s1 = theEvent(queryAt(next[Date] /& Monday))", "val s2 = s1.attendees.withResponse(ResponseStatusType.notResponded)", "val s3 = s2.filter(x => x.nameAndEmail == thePerson(me).manager.nameAndEmail)", "val s4 = Option.when(s3.nonEmpty){deleteEvent(s1)}"], "datum_id": "d453", "utterance_id": "d453", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"Hawaii Vacation\""}, {"step_index": 1, "step": "Schedule a new meeting for the day after the event s1"}], "utterance": "Search my calendar for any event named Hawaii Vacation and schedule a meeting for the day after that event.", "plans": ["val s1 = theEvent(called(\"Hawaii Vacation\"))", "val s2 = createEvent(createAt(s1.end.local.date + 1.days))"], "datum_id": "d475", "utterance_id": "d475", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Check my manager's availability between 3 and 5 pm today"}, {"step_index": 1, "step": "If the list s1 is empty, schedule a 1/1 with my manager"}], "utterance": "Check my manager's availability between 3 and 5 pm today and if available, create a 1/1 meeting with him and send him an invite.", "plans": ["val s1 = availabilityExcludingMe(createAt(timeInterval(3.pm, 5.pm) on today) and with_(thePerson(me).manager))", "val s2 = Option.when(s1.isEmpty){createEvent(with_(thePerson(me).manager) and isOneOnOne)}"], "datum_id": "d476", "utterance_id": "d476", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events with John and Jennifer occuring today"}, {"step_index": 1, "step": "If the list of events s1 is not empty, then modify each event in the list s1 to include my manager"}], "utterance": "Check my calendar for any meetings that include both John and Jennifer today, and if there are any, add my manager as an attendee.", "plans": ["val s1 = findEvents(with_(\"John\") and with_(\"Jennifer\") and queryAt(today))", "val s2 = Option.when(s1.nonEmpty){s1.map(x => modifyEvent(x, with_(thePerson(me).manager)))}"], "datum_id": "d477", "utterance_id": "d477", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get my reports"}, {"step_index": 1, "step": "Create a one on one event during the week of Halloween with each person from the list s1"}], "utterance": "Create a 1/1 event for each of my reports in the week of Halloween.", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.map(x => createEvent(isOneOnOne and with_(x) and createAt(theDate(Holiday.Halloween).weekInterval)))"], "datum_id": "d478", "utterance_id": "d478", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my meetings on Friday"}, {"step_index": 1, "step": "Get the size of the list s1"}, {"step_index": 2, "step": "If the number s2 is greater than 6, delete each event after the sixth event in the list s1"}], "utterance": "How many meetings do I have on Friday? If there are more than six, clear out everything after the sixth event.", "plans": ["val s1 = findEvents(queryAt(Friday))", "val s2 = s1.size", "val s3 = Option.when(s2 > 6){s1.drop(6).map(x => deleteEvent(x))}"], "datum_id": "d47Annotator4", "utterance_id": "d47", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get the title/subject of the 3rd meeting on Saturday"}, {"step_index": 1, "step": "Get the title/subject of the meeting at 10 am on Saturday"}, {"step_index": 2, "step": "Compare if the title s1 is same as the the title s2"}], "utterance": "Does my 3rd event on Saturday and the event on Saturday at 10:00 AM have the same title", "plans": ["val s1 = theEvent(nth[Event](3) and queryAt(Saturday)).subject.get", "val s2 = theEvent(startsAt(10.am) and queryAt(Saturday)).subject.get", "val s3 = s1 == s2"], "datum_id": "d481", "utterance_id": "d481", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Create email with message wishing 'Happy Halloween' to my direct reports and manager"}], "utterance": "Send an email to my reports and my manager to wish them Happy Halloween", "plans": ["val s1 = createEmail(messageWithTo(thePerson(me).manager) and messageWithTo(thePerson(me).directReports) and messageBodyIs(\"Happy Halloween\"))"], "datum_id": "d482", "utterance_id": "d482", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the next event called Team meeting"}, {"step_index": 1, "step": "Find all events on the event s1's start date that aren't called the \"Team meeting\""}, {"step_index": 2, "step": "Delete each event from the list s2"}], "utterance": "Check my calendar for the next Team meeting and delete any other events that are scheduled for that day.", "plans": ["val s1 = theEvent(next[Event] and called(\"Team meeting\"))", "val s2 = findEvents(queryAt(s1.start.local.date) and not(called(\"Team meeting\")))", "val s3 = s2.map(x => deleteEvent(x))"], "datum_id": "d484", "utterance_id": "d484", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all meetings happening this week"}, {"step_index": 1, "step": "Filter the list of events s1 to keep events with a duration greater than 2 hours"}, {"step_index": 2, "step": "Update each event in the list s2 to happen next week"}], "utterance": "Find all the meetings this week where the duration is more than 2 hours and reschedule them to next week.", "plans": ["val s1 = findEvents(queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = s1.filter(x => x.duration > 2.hours)", "val s3 = s2.map(x => modifyEvent(x, startsAt((next[Interval[Date]] and isWeek))))"], "datum_id": "d485", "utterance_id": "d485", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Create a meeting with my direct reports with the subject \"discuss the upcoming project\""}], "utterance": "Schedule a meeting with my direct reports to discuss the upcoming project.", "plans": ["val s1 = createEvent(with_(thePerson(me).directReports) and called(\"discuss the upcoming project\"))"], "datum_id": "d486", "utterance_id": "d486", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events that occur today"}, {"step_index": 1, "step": "Filter out the list of events s1 to keep events that have at least 3 attendees"}, {"step_index": 2, "step": "Delete each event in the list s2"}], "utterance": "If there is a meeting with less than 3 attendees happening today, cancel it", "plans": ["val s1 = findEvents(queryAt(today))", "val s2 = s1.filter(x => x.attendees.all.size >= 3)", "val s3 = s2.map(x => deleteEvent(x))"], "datum_id": "d488", "utterance_id": "d488", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events called \"lunch\" between 1 PM and 3 PM tomorrow"}, {"step_index": 1, "step": "If the list of events s1 is empty then create a new event called \"lunch break\" that lasts for 20 minutes and happens between 1 PM and 3 PM tomorrow"}], "utterance": "If there isn't a lunch event on my schedule tomorrow between 1 PM and 3 PM, schedule a 20 minute lunch break for me.", "plans": ["val s1 = findEvents(called(\"lunch\") and queryAt(timeInterval(1.pm, 3.pm) on tomorrow))", "val s2 = Option.when(s1.isEmpty){createEvent(lastsFor(20.minutes) and called(\"lunch break\") and createAt(timeInterval(1.pm, 3.pm) on tomorrow))}"], "datum_id": "d489", "utterance_id": "d489", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab my reports"}, {"step_index": 1, "step": "Filter list of persons s1 to include only those who have the title \"manager\""}, {"step_index": 2, "step": "Filter list of persons s1 to include only those who do not have the title \"manager\""}, {"step_index": 3, "step": "Create an event with the list of persons s2"}, {"step_index": 4, "step": "Create an event with the list of persons s3"}], "utterance": "Schedule two meetings with my reports, one with all people with manager in their title, and the second one with the remaining.", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.filter(jobTitleIs(\"manager\"))", "val s3 = s1.filter(not(jobTitleIs(\"manager\")))", "val s4 = createEvent(with_(s2))", "val s5 = createEvent(with_(s3))"], "datum_id": "d49", "utterance_id": "d49", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the events for rest of the day"}, {"step_index": 1, "step": "If the list of events s1 is empty then set my status to be right back with message I will be back"}], "utterance": "If I do not have any more meetings today, then set my status to be right back and say I will be back", "plans": ["val s1 = findEvents(queryAt(restOfToday))", "val s2 = Option.when(s1.isEmpty){setStatus(setStatusToWithMessage(UserStatus.BeRightBack, \"I will be back\"))}"], "datum_id": "d490", "utterance_id": "d490", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get Sarah"}, {"step_index": 1, "step": "Get the person s1's time zone"}, {"step_index": 2, "step": "Create an event next week with the person s1 in the morning as per the time zone s2"}], "utterance": "Can you find a time next week where I can have a meeting with Sarah, such that it's morning for Sarah's time zone?", "plans": ["val s1 = thePerson(\"Sarah\")", "val s2 = s1.timeZone", "val s3 = createEvent(createAt(morning on (next[Interval[Date]] and isWeek) inZone s2) and with_(s1))"], "datum_id": "d492", "utterance_id": "d492", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all events happening next week"}, {"step_index": 1, "step": "Filter the list of events s1 to include only those events which have been declined by more than half of their attendees"}, {"step_index": 2, "step": "Delete each event in the the list s2"}], "utterance": "If there are any meetings scheduled next week that have been declined by more than half of the attendees, cancel them.", "plans": ["val s1 = findEvents(queryAt((next[Interval[Date]] and isWeek)))", "val s2 = s1.filter(x => (x.attendees.all).size <= (x.attendees.withResponse(ResponseStatusType.declined)).size*2)", "val s3 = s2.map(x => deleteEvent(x))"], "datum_id": "d493", "utterance_id": "d493", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get my manager"}, {"step_index": 1, "step": "Get my team"}, {"step_index": 2, "step": "Create an event with the person s1, the list of persons s2, and call it \"discuss the progress on our latest project\""}], "utterance": "Schedule a meeting with my manager and my immediate peers, to discuss the progress on our latest project", "plans": ["val s1 = thePerson(me).manager", "val s2 = thePerson(me).team", "val s3 = createEvent(with_(s1) and with_(s2) and called(\"discuss the progress on our last project\"))"], "datum_id": "d494", "utterance_id": "d494", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Create a list of the days in a week"}, {"step_index": 1, "step": "For each day in the list s1, create an half hour event called \"lunch break\" at lunch time on that day"}], "utterance": "Update my calendar to include a half hour lunch break on each day this week at an appropriate lunch time.", "plans": ["val s1 = List[DayOfWeek](Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)", "val s2 = s1.map(x => createEvent(lastsFor((1/2).hours) and called(\"lunch break\") and createAt(lunchTime on x)))"], "datum_id": "d496", "utterance_id": "d496", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the next meeting with Jack"}, {"step_index": 1, "step": "Get my reports"}, {"step_index": 2, "step": "Create a new email to the list of persons s2 and with the same subject as the event s1"}], "utterance": "Find my next meeting with Jack. Send an email to my reports with subject same as the title of the meeting with Jack.", "plans": ["val s1 = theEvent(next[Event] and with_(\"Jack\"))", "val s2 = thePerson(me).directReports", "val s3 = createEmail(messageWithTo(s2) and messageTitleIs(s1.subject.get))"], "datum_id": "d497", "utterance_id": "d497", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"sync call\" happening next week"}, {"step_index": 1, "step": "Get the list of attendees in the event s1"}, {"step_index": 2, "step": "Filter the list of persons s2 to include only those who have \"program manager\" as job title"}, {"step_index": 3, "step": "If the list s3 is empty then create an email to Ned titled \"Please Send Updates\""}], "utterance": "If no program manager has accepted the sync call next week, then send an email to Ned titled Please Send Updates", "plans": ["val s1 = theEvent(called(\"sync call\") and queryAt(next[Interval[Date]] and isWeek))", "val s2 = s1.attendees.all", "val s3 = s2.map(x => getPersonFromAttendee(x)).filter(jobTitleIs(\"program manager\"))", "val s4 = Option.when(s3.isEmpty){createEmail(messageWithTo(\"Ned\") and messageTitleIs(\"Please Send Updates\"))}"], "datum_id": "d498", "utterance_id": "d498", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get my manager's manager, who would be the skip manager"}, {"step_index": 1, "step": "Get the direct reports of the person s1"}, {"step_index": 2, "step": "Filter the list of persons s2 to include only those who are not my manager"}, {"step_index": 3, "step": "Call the person s1 and the list of persons s3"}], "utterance": "I need to schedule a call with my skip manager and his reports except my manager", "plans": ["val s1 = thePerson(me).manager.manager", "val s2 = s1.directReports", "val s3 = s2.filter(x => x != thePerson(me).manager)", "val s4 = call(callWith(s1) and callWith(s3))"], "datum_id": "d499", "utterance_id": "d499", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my reports that have manager in their job title"}, {"step_index": 1, "step": "Find my reports that do not have manager in their job title"}, {"step_index": 2, "step": "Create a meeting with the list of persons in s1 if the list s1 is not empty"}, {"step_index": 3, "step": "Create a meeting with the list of persons in s2 if the list s2 is not empty"}], "utterance": "Schedule two meetings with my reports, one with all people with manager in their title, and the second one with the remaining. Do not schedule any call where there is no attendee other than me.", "plans": ["val s1 = thePerson(me).directReports.filter(jobTitleIs(\"manager\"))", "val s2 = thePerson(me).directReports.filter(not(jobTitleIs(\"manager\")))", "val s3 = Option.when(s1.size > 0){createEvent(with_(s1))}", "val s4 = Option.when(s2.size > 0){createEvent(with_(s2))}"], "datum_id": "d49a", "utterance_id": "d49a", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"vacation\" next week"}, {"step_index": 1, "step": "Find events next week that are not called \"vacation\""}, {"step_index": 2, "step": "Filter the list of events s2 to include only the events that intersect with the event s1"}], "utterance": "Check the upcoming meetings to find out any conflicts with vacation next week", "plans": ["val s1 = theEvent(called(\"vacation\") and queryAt(next[Interval[Date]] and isWeek))", "val s2 = findEvents(not(called(\"vacation\")) and queryAt(next[Interval[Date]] and isWeek))", "val s3 = s2.filter(x => x.interval.intersects(s1.interval))"], "datum_id": "d500", "utterance_id": "d500", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"Hawaii vacation\" happening next week"}, {"step_index": 1, "step": "Find all events which happen before the event s1"}, {"step_index": 2, "step": "Find the last meeting in the list s2"}, {"step_index": 3, "step": "Create an event called \"dummy event\" after the event s3"}], "utterance": "Block my calendar with a dummy event after the last meeting I have before my Hawaii vacation next week", "plans": ["val s1 = theEvent(called(\"Hawaii vacation\") and queryAt(next[Interval[Date]] and isWeek))", "val s2 = findEvents(queryAt(before(s1.start)))", "val s3 = s2(s2.size - 1)", "val s4 = createEvent(called(\"dummy event\") and createAt(after(s3.end)))"], "datum_id": "d501", "utterance_id": "d501", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get my reports"}, {"step_index": 1, "step": "Find a one-on-one with each person in the list s1 this week"}, {"step_index": 2, "step": "For each event in the list s2 update it to be on Wednesday this week"}], "utterance": "Move all my 1/1 meetings with my reports this week to happen on Wednesday this week.", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.map(x => theEvent(isOneOnOne and with_(x) and queryAt(`this`[Interval[Date]] and isWeek)))", "val s3 = s2.map(x => modifyEvent(x, createAt(Wednesday on (`this`[Interval[Date]] and isWeek))))"], "datum_id": "d502", "utterance_id": "d502", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Identify event called 'project sync'"}, {"step_index": 1, "step": "Get all the attendees in the event s1"}, {"step_index": 2, "step": "Create email to the list of attendees s2 asking \"Will you send agenda items, please?\""}], "utterance": "Send an email to all participants of project sync call, asking them to send agenda items.", "plans": ["val s1 = theEvent(called(\"project sync call\"))", "val s2 = s1.attendees.all", "val s3 = createEmail(messageWithTo(s2) and messageBodyIs(\"Will you send agenda items, please?\"))"], "datum_id": "d503", "utterance_id": "d503", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events called \"research sync\" in February"}, {"step_index": 1, "step": "For each event in the list of events s1, create a \"preparation call\" event with John one day before the event"}], "utterance": "Find all the research syncs in February, setting up preparation calls with John one day before each such meeting.", "plans": ["val s1 = findEvents(called(\"research sync\") and queryAt(monthOf(February)))", "val s2 = s1.map(x => createEvent(called(\"preparation call\") and with_(\"John\") and createAt(x.start.local.date - 1.days)))"], "datum_id": "d504", "utterance_id": "d504", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"happy hour\" on today"}, {"step_index": 1, "step": "Find all events happening today"}, {"step_index": 2, "step": "Filter list of events s2 to include only those events that intersect with the event s1 and which are not the event s1"}, {"step_index": 3, "step": "Update each event in the list s3 to happen today"}], "utterance": "Adjust my schedule making sure there are no conflicts with the happy hour event today", "plans": ["val s1 = theEvent(called(\"happy hour\") and queryAt(today))", "val s2 = findEvents(queryAt(today))", "val s3 = s2.filter(x => x.interval.intersects(s1.interval) && x.id != s1.id)", "val s4 = s3.map(x => modifyEvent(x, startsAt(today)))"], "datum_id": "d506", "utterance_id": "d506", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find my peers by finding the direct reports of my manager that are not me"}, {"step_index": 1, "step": "Find a peer by grabbing the first member of the list s1"}, {"step_index": 2, "step": "Find another peer by grabbing the second member of the list s1"}, {"step_index": 3, "step": "Create an event called \"client meeting\" and invite my manager and invite the person s2 and the person s3"}], "utterance": "Create a new event for a client meeting and invite my manager and any two peers of mine to attend.", "plans": ["val s1 = thePerson(me).manager.directReports.filter(x => x != me)", "val s2 = s1(0)", "val s3 = s1(1)", "val s4 = createEvent(called(\"client meeting\") and with_(thePerson(me).manager) and with_(s2) and with_(s3))"], "datum_id": "d507", "utterance_id": "d507", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"team meeting\" that is happening Monday afternoon"}, {"step_index": 1, "step": "Get all the attendees of the event s1"}, {"step_index": 2, "step": "Filter the attendees to include only those who work in the IST time zone"}, {"step_index": 3, "step": "If s3 is not empty then update the event s1 to happen on Monday evening"}], "utterance": "Reschedule the team meeting that is currently set for Monday afternoon to Monday evening if there is at least one attendee who works in IST time zone", "plans": ["val s1 = theEvent(called(\"team meeting\") and queryAt(afternoon on Monday))", "val s2 = s1.attendees.all.map(x => getPersonFromAttendee(x))", "val s3 = s2.filter(p => p.timeZone == TimeZone(\"IST\"))", "val s4 = Option.when(s3.nonEmpty){modifyEvent(s1, startsAt(evening on Monday))}"], "datum_id": "d508", "utterance_id": "d508", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find emails from user's manager with the title \"Urgent Meeting Request\""}, {"step_index": 1, "step": "If the list of emails s1 is not empty then create a meeting with all the direct reports of user's manager"}], "utterance": "If there is an email from my manager with the subject line \"Urgent Meeting Request\", schedule a meeting on my calendar and invite all reports of my manager", "plans": ["val s1 = findEmails(messageWithSender(thePerson(me).manager) and messageTitleIs(\"Urgent Meeting Request\"))", "val s2 = Option.when(s1.nonEmpty){createEvent(with_(thePerson(me).manager.directReports))}"], "datum_id": "d509", "utterance_id": "d509", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all events happening this week"}, {"step_index": 1, "step": "Filter the list of events s1 to keep only the events with more than 10 attendees"}, {"step_index": 2, "step": "Update each event in the list s2 to happen next week"}], "utterance": "Move all meetings this week with more than 10 attendees to next week to maximize efficiency.", "plans": ["val s1 = findEvents(queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = s1.filter(x => x.attendees.all.size > 10)", "val s3 = s2.map(x => modifyEvent(x, startsAt(next[Interval[Date]] and isWeek)))"], "datum_id": "d511", "utterance_id": "d511", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"team meeting\" that recurs weekly"}, {"step_index": 1, "step": "Find all events"}, {"step_index": 2, "step": "Filter events from the list s2 to include only the ones that intersect with the event s1 and that are not the event s1"}, {"step_index": 3, "step": "Decline each event in the list s3"}], "utterance": "Decline any meeting invitations that are scheduled during my weekly team meeting.", "plans": ["val s1 = theEvent(called(\"team meeting\") and recurringWeekly)", "val s2 = findEvents0", "val s3 = s2.filter(x => x.interval.intersects(s1.interval) && x.id != s1.id)", "val s4 = s3.map(x => respond(x, withResponse(ResponseStatusType.declined)))"], "datum_id": "d512", "utterance_id": "d512", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"training session\" that happened last week"}, {"step_index": 1, "step": "Find my direct reports"}, {"step_index": 2, "step": "Filter the list of persons s2 to keep only the people who did not attend the event s1"}, {"step_index": 3, "step": "Create an event called \"training session\" with the list of persons s3"}], "utterance": "Create a new event in my calendar for a training session and invite all my reports who did not attend the training session last week", "plans": ["val s1 = theEvent(called(\"training session\") and queryAt(last[Interval[Date]] and isWeek))", "val s2 = thePerson(me).directReports", "val s3 = s2.filter(x => !s1.attendees.isAttending(x))", "val s4 = createEvent(called(\"training session\") and with_(s3))"], "datum_id": "d513", "utterance_id": "d513", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events tomorrow that are not between 8am and 5pm."}, {"step_index": 1, "step": "Email the organizers of each event in the list s1 with the title \"please reschedule\"."}], "utterance": "If a meeting tomorrow is scheduled outside of my regular working hours of 8 am and 5 pm, send an email to the organizer titled 'please reschedule'", "plans": ["val s1 = findEvents(queryAt(tomorrow) and not(queryAt(timeInterval(8.am, 5.pm))))", "val s2 = s1.map(x => createEmail(messageWithTo(x.attendees.organizer) and messageTitleIs(\"please reschedule\")))"], "datum_id": "d514", "utterance_id": "d514", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all events happening on the 21st"}, {"step_index": 1, "step": "Filter the list of events s1 to keep events which are not one-on-one"}, {"step_index": 2, "step": "Update each event in the list s2 to happen on the 22nd"}], "utterance": "Move all the events on the 21st to the 22nd, except for the one-on-one meetings.", "plans": ["val s1 = findEvents(queryAt(21))", "val s2 = s1.filter(not(isOneOnOne))", "val s3 = s2.map(x => modifyEvent(x, startsAt(22)))"], "datum_id": "d515", "utterance_id": "d515", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"team meeting\" on Monday afternoon"}, {"step_index": 1, "step": "Get list of attendees in the event s1"}, {"step_index": 2, "step": "Filter the list of persons s2 to include only those whose time zone is EST"}, {"step_index": 3, "step": "Filter the list of persons s2 to include only those whose time zone is PST"}, {"step_index": 4, "step": "If the size of the list s3 is larger than the size of the list s4, then modify the event s1 to happen on Friday morning"}], "utterance": "Reschedule the team meeting on Monday afternoon to Friday morning if attendees in EST time zone are more than the ones in PST time zone", "plans": ["val s1 = theEvent(called(\"team meeting\") and queryAt(afternoon on Monday))", "val s2 = s1.attendees.all.map(at => getPersonFromAttendee(at))", "val s3 = s2.filter(p => p.timeZone == TimeZone(\"EST\"))", "val s4 = s2.filter(p => p.timeZone == TimeZone(\"PST\"))", "val s5 = Option.when(s3.size > s4.size){modifyEvent(s1, createAt(morning on Friday))}"], "datum_id": "d517", "utterance_id": "d517", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get list of my direct reports"}, {"step_index": 1, "step": "Filter the list of persons s1 to get the people who work in 'EST' timezone"}, {"step_index": 2, "step": "Filter the list of persons s1 to get the people who work in 'PST' timezone"}, {"step_index": 3, "step": "Create an event with people in the list s2 on Friday called 'culture conversation'"}, {"step_index": 4, "step": "Create an event with people in the list s3 on Friday called 'culture conversation'"}], "utterance": "I need culture conversation meetings with all the members of my reports on coming Friday. Create one event for people in PST timezone and a separate one for people in EST time zone.", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.filter(p => p.timeZone == TimeZone(\"EST\"))", "val s3 = s1.filter(p => p.timeZone == TimeZone(\"PST\"))", "val s4 = createEvent(with_(s2) and createAt(Friday) and called(\"culture conversation\"))", "val s5 = createEvent(with_(s3) and createAt(Friday) and called(\"culture conversation\"))"], "datum_id": "d518", "utterance_id": "d518", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get the attendees of the event called \"project management meeting\" happening on 19 April"}, {"step_index": 1, "step": "Create an email titled \"please attend\" and send it to the list s1"}], "utterance": "Send an email titled 'please attend' to the people attending project management meeting on 19 April", "plans": ["val s1 = theEvent(called(\"project management meeting\") and queryAt (19 /& April)).attendees.all", "val s2 = createEmail(messageTitleIs(\"please attend\") and messageWithTo(s1))"], "datum_id": "d519", "utterance_id": "d519", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called \"call with John\""}, {"step_index": 1, "step": "Find the event called \"call with Jennifer\""}, {"step_index": 2, "step": "Establish the time interval between the end time of the event s1 and the start time of the event s2"}, {"step_index": 3, "step": "Find all the events on the calendar"}, {"step_index": 4, "step": "Filter the list of events s4 to keep only the events that intersect with the time interval s3"}, {"step_index": 5, "step": "Decline each event in the list s5"}], "utterance": "Decline any meetings between the call with John and the call with Jennifer?", "plans": ["val s1 = theEvent(called(\"call with John\"))", "val s2 = theEvent(called(\"call with Jennifer\"))", "val s3 = Interval[Instant](s1.end, s2.start)", "val s4 = findEvents0", "val s5 = s4.filter(x => x.interval.intersects(s3))", "val s6 = s5.map(x => respond(x, withResponse(ResponseStatusType.declined)))"], "datum_id": "d521", "utterance_id": "d521", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find user's direct reports"}, {"step_index": 1, "step": "Filter the list of persons s1 to include only those who do not have a one on one scheduled for next week"}, {"step_index": 2, "step": "Create a new event that is one on one and next week called \"performance review\" with each person in the list of persons s2"}], "utterance": "Next week is performance review week. Create a separate 1/1 event with each of my reports to discuss their review, except for the ones who already have 1/1 scheduled.", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.filter(x => findEvents(with_(x) and isOneOnOne and queryAt(next[Interval[Date]] and isWeek)).isEmpty)", "val s3 = s2.map(x => createEvent(with_(x) and isOneOnOne and createAt(next[Interval[Date]] and isWeek) and called(\"performance review\")))"], "datum_id": "d527", "utterance_id": "d527", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events with Peter happening this week"}, {"step_index": 1, "step": "If the list s1 is empty then create a meeting with Peter tomorrow at 4 pm"}], "utterance": "Check my calendar for the upcoming meeting with Peter this week and if it hasn't been scheduled yet, create one for tomorrow at 4 pm.", "plans": ["val s1 = findEvents(with_(\"Peter\") and queryAt(`this`[Interval[Date]] and isWeek))", "val s2 = Option.when(s1.isEmpty){createEvent(with_(\"Peter\") and createAt(4.pm on tomorrow))}"], "datum_id": "d528", "utterance_id": "d528", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called 'Webinar'"}, {"step_index": 1, "step": "Find all events happening on Thursday"}, {"step_index": 2, "step": "Filter the event list s2 to keep those that happen at the same time as the event s1"}, {"step_index": 3, "step": "Update each event in the list s3 to be created on Friday"}], "utterance": "Check for any conflicting meetings with the Webinar on Thursday and if there are any, reschedule those to Friday.", "plans": ["val s1 = theEvent(called(\"Webinar\"))", "val s2 = findEvents(queryAt(Thursday))", "val s3 = s2.filter(x => x.interval.intersects(s1.interval))", "val s4 = s3.map(x => modifyEvent(x, createAt(Friday)))"], "datum_id": "d529", "utterance_id": "d529", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events called \"team sync\" and between 2 PM and 4 PM on Wednesday"}, {"step_index": 1, "step": "If the list s1 is empty, then create an event called \"break\" between 2 PM and 4 PM on Wednesday"}], "utterance": "If there isn't a team sync on my schedule on Wednesday between 2 pm and 4 pm, schedule a break for me at that time.", "plans": ["val s1 = findEvents(called(\"team sync\") and queryAt(timeInterval(2.pm, 4.pm) on Wednesday))", "val s2 = Option.when(s1.isEmpty){createEvent(called(\"break\") and createAt(timeInterval(2.pm, 4.pm) on Wednesday))}"], "datum_id": "d532", "utterance_id": "d532", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events that are with my manager and my reports tomorrow"}, {"step_index": 1, "step": "If the list of events s1 is empty then create a meeting with user's direct reports and manager at 3 pm tomorrow"}], "utterance": "Check if the meeting with my manager and my reports tomorrow has been scheduled and if not, create one at 3 pm.", "plans": ["val s1 = findEvents(with_(thePerson(me).manager) and with_(thePerson(me).directReports) and queryAt(tomorrow))", "val s2 = Option.when(s1.isEmpty){createEvent(createAt(3.pm on tomorrow) and with_(thePerson(me).manager) and with_(thePerson(me).directReports))}"], "datum_id": "d533", "utterance_id": "d533", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all events called \"team meetings\" which happen between 5 pm and 6 pm today"}, {"step_index": 1, "step": "Filter the list of events s1 to keep events which have no attendees"}, {"step_index": 2, "step": "Delete each event in the list s2"}], "utterance": "Check my calendar for any team meetings scheduled between 5 pm and 6 pm today and delete any of those events without any attendees.", "plans": ["val s1 = findEvents(called(\"team meetings\") and queryAt(timeInterval(5.pm, 6.pm) on today))", "val s2 = s1.filter(x => x.attendees.otherPeople.isEmpty)", "val s3 = s2.map(x => deleteEvent(x))"], "datum_id": "d535", "utterance_id": "d535", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Filter my direct reports to keep the ones whose title is manager"}, {"step_index": 1, "step": "Create an event called 'Department Check-Ins' with the list of persons s1"}], "utterance": "Create an event titled \u201cDepartment Check-Ins\u201d and add all of my reports whose title is manager.\"", "plans": ["val s1 = thePerson(me).directReports.filter(jobTitleIs(\"manager\"))", "val s2 = createEvent(with_(s1) and called(\"Department Check-Ins\"))"], "datum_id": "d541", "utterance_id": "d541", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Get John's direct reports"}, {"step_index": 1, "step": "Filter the list of persons s1 to keep only those with a job title containing \"engineer\""}, {"step_index": 2, "step": "Find the event with the list of persons s2 and called \"demo call\""}, {"step_index": 3, "step": "Filter the list of persons s2 to keep only the people who accepted the event s3"}, {"step_index": 4, "step": "If the list s4 is empty, then create a one on one with John today"}], "utterance": "If none of the engineers reporting to John have accepted the meeting demo call, then setup a 1/1 with John today.", "plans": ["val s1 = thePerson(\"John\").directReports", "val s2 = s1.filter(jobTitleIs(\"engineer\"))", "val s3 = theEvent(with_(s2) and called(\"demo call\"))", "val s4 = s2.filter(x => s3.attendees.isAttending(x))", "val s5 = Option.when(s4.isEmpty){createEvent(isOneOnOne and with_(\"John\") and createAt(today))}"], "datum_id": "d543", "utterance_id": "d543", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events with Henry"}, {"step_index": 1, "step": "If the list s1 is not empty, then create a meeting with Jack on the same day after the first event in the list s1, otherwise do nothing"}], "utterance": "If I have a meeting with Henry, then set a meeting with Jack on the same day after the call with Henry", "plans": ["val s1 = findEvents(with_(\"Henry\"))", "val s2 = Option.when(s1.nonEmpty){createEvent(with_(\"Jack\") and createAt(s1.head.start.local.date) and after(s1.head))}"], "datum_id": "d58", "utterance_id": "d58", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all of the user's reports"}, {"step_index": 1, "step": "Find the \"All hands\" that is on next Monday"}, {"step_index": 2, "step": "Filter list of persons s1 to include only those who have accepted event s2"}, {"step_index": 3, "step": "Find the size of list of persons s3"}], "utterance": "How many of my reports accepted the All hands that's being held next Monday?", "plans": ["val s1 = thePerson(me).directReports", "val s2 = theEvent(called(\"All hands\") and queryAt(theDate(next[Date] /& Monday)))", "val s3 = s1.filter(x => s2.attendees.isAttending(x))", "val s4 = s3.size"], "datum_id": "d62", "utterance_id": "d62", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all meetings with my reports this week that are an hour long"}, {"step_index": 1, "step": "Update each meeting in the list s1 to have a duration of 30 minutes"}], "utterance": "If any of my meetings with my reports this week are an hour long, cut those meetings down to 30 minutes.", "plans": ["val s1 = findEvents(with_(thePerson(me).directReports) and queryAt(`this`[Interval[Date]] and isWeek) and lastsFor(1.hours))", "val s2 = s1.map(x => modifyEvent(x, (lastsFor(30.minutes))))"], "datum_id": "d67Annotator4", "utterance_id": "d67", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab my reports"}, {"step_index": 1, "step": "Find the event called party"}, {"step_index": 2, "step": "Grab the attendees that have not responded to the event s2"}, {"step_index": 3, "step": "Filter the list of persons s1 to include only the people contained in the list s3"}, {"step_index": 4, "step": "Remove each person in the list s4 from the event s2"}], "utterance": "If some of my reports have not responded to the party invite, exclude them from the invitation", "plans": ["val s1 = thePerson(me).directReports", "val s2 = theEvent(called(\"party\"))", "val s3 = s2.attendees.withResponse(ResponseStatusType.notResponded).map(x => thePerson(x.nameAndEmail))", "val s4 = s1.filter(x => s3.contains(x))", "val s5 = s4.map(x => modifyEvent(s2, not(with_(x))))"], "datum_id": "d72", "utterance_id": "d72", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find all meetings on Monday"}, {"step_index": 1, "step": "If the list s1 contains more than 5 meetings then decline the meeting from the list s1 with the longest duration"}], "utterance": "If I have more than 5 meetings on Monday, decline the longest scheduled meeting", "plans": ["val s1 = findEvents(queryAt(Monday))", "val s2 = Option.when(s1.size > 5){respond(max(s1, (x => x.duration)), withResponse(ResponseStatusType.declined))}"], "datum_id": "d74Annotator4", "utterance_id": "d74", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find the event called offsite planning meeting"}, {"step_index": 1, "step": "Find the event called vacation to the maldives"}, {"step_index": 2, "step": "If the event s1 intersects with the event s2 then decline the event s1"}], "utterance": "Decline my offsite planning meeting but only if it is taking place at the same time as my vacation to the maldives", "plans": ["val s1 = theEvent(called(\"offsite planning meeting\"))", "val s2 = theEvent(called(\"vacation to the maldives\"))", "val s3 = Option.when(s1.interval.intersects(s2.interval)){respond(s1, withResponse(ResponseStatusType.declined))}"], "datum_id": "d8", "utterance_id": "d8", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab my reports"}, {"step_index": 1, "step": "Filter the list of persons s1 to include only the people with an office location matching \"Seattle campus\""}, {"step_index": 2, "step": "Create an event called \"discussion\" and include the list of persons s2"}], "utterance": "Set up a discussion with my reports who are based out of Seattle campus", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.filter(x => x.officeLocation == Some(\"Seattle campus\"))", "val s3 = createEvent(called(\"discussion\") and with_(s2))"], "datum_id": "d86", "utterance_id": "d86", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Find events at noon tomorrow"}, {"step_index": 1, "step": "Identify the event in the list of events s1 with minimum number of attendees"}, {"step_index": 2, "step": "If size of the list s1 is more than 1 then decline the event s2"}], "utterance": "If there is more than one meeting at noon tomorrow, decline the one which has less attendees.", "plans": ["val s1 = findEvents(queryAt(noon on tomorrow))", "val s2 = min(s1, x => x.attendees.all.size)", "val s3 = Option.when(s1.size > 1){respond(s2, withResponse(ResponseStatusType.declined))}"], "datum_id": "d9", "utterance_id": "d9", "is_unannotated": false}
{"steps": [{"step_index": 0, "step": "Grab my reports"}, {"step_index": 1, "step": "Find one on one events with each person in the list s1, constructing a single list of queried events"}, {"step_index": 2, "step": "Filter the list of events s2 to include the events that are on a Friday"}, {"step_index": 3, "step": "Modify each event in the list s3 to make the duration shorter by 10 minutes"}], "utterance": "Remove 10 minutes from all the 1/1 with my reports if they happen on Fridays", "plans": ["val s1 = thePerson(me).directReports", "val s2 = s1.flatMap(x => findEvents(isOneOnOne and with_(x)))", "val s3 = s2.filter(x => x.start.local.date.dayOfWeek == Friday)", "val s4 = s3.map(x => modifyEvent(x, (ev => ev.duration == x.duration - 10.minutes)))"], "datum_id": "d94", "utterance_id": "d94", "is_unannotated": false}
{"steps": [], "utterance": "Reschedule my meeting with John if it clashes with my \"dentist appointment\"", "plans": null, "datum_id": "d1000", "utterance_id": "d1000", "is_unannotated": true}
{"steps": [], "utterance": "Forward the agenda of the team meeting to all of my reports with \"researcher\" job title", "plans": null, "datum_id": "d1001", "utterance_id": "d1001", "is_unannotated": true}
{"steps": [], "utterance": "Reschedule any my meeting on Friday to Thursday if more than one attendee has declined the meeting", "plans": null, "datum_id": "d1002", "utterance_id": "d1002", "is_unannotated": true}
{"steps": [], "utterance": "Cancel all my meetings next week that are less than 30 minutes long", "plans": null, "datum_id": "d1003", "utterance_id": "d1003", "is_unannotated": true}
{"steps": [], "utterance": "If there is any sales sync meeting this week, find me the emails from Lisa with attachments", "plans": null, "datum_id": "d1004", "utterance_id": "d1004", "is_unannotated": true}
{"steps": [], "utterance": "I need two half hour meetings today. One with all of my reports. The second one with my reports with only senior in job title", "plans": null, "datum_id": "d1005", "utterance_id": "d1005", "is_unannotated": true}
{"steps": [], "utterance": "I have to add Jim in all the 1/1 discussions with my reports this week", "plans": null, "datum_id": "d1006", "utterance_id": "d1006", "is_unannotated": true}
{"steps": [], "utterance": "Do jesse rosenfield and david crim have the same skip manager", "plans": null, "datum_id": "d1007", "utterance_id": "d1007", "is_unannotated": true}
{"steps": [], "utterance": "Send an email titled \"please attend - urgent\" to the people who declined standup sync call tomorro", "plans": null, "datum_id": "d1008", "utterance_id": "d1008", "is_unannotated": true}
{"steps": [], "utterance": "Send an email titled \"please attend - urgent\" to my reports who declined standup sync call tomorrow", "plans": null, "datum_id": "d1009", "utterance_id": "d1009", "is_unannotated": true}
{"steps": [], "utterance": "Whosever between Jesse Rosenfield and David Crim has more reports, setup a meeting with them to have a chat about offsite", "plans": null, "datum_id": "d1010", "utterance_id": "d1010", "is_unannotated": true}
{"steps": [], "utterance": "How many people in the \"Standup call\" have Jim Crim as their manager or their skip manager", "plans": null, "datum_id": "d1011", "utterance_id": "d1011", "is_unannotated": true}
{"steps": [], "utterance": "I am busy this week. Decline all the calls this week except 1/1 calls with my reports", "plans": null, "datum_id": "d1012", "utterance_id": "d1012", "is_unannotated": true}
{"steps": [], "utterance": "How many days next month do I have more than 4 meetings scheduled", "plans": null, "datum_id": "d1013", "utterance_id": "d1013", "is_unannotated": true}
{"steps": [], "utterance": "Jack Crim was left the team. Remove him from all the \"Team Sync\" meetings this week, and add Jim Park in his place", "plans": null, "datum_id": "d1014", "utterance_id": "d1014", "is_unannotated": true}
{"steps": [], "utterance": "I have a call with Jack and a call with Jim today. Exchange the timing of the two calls", "plans": null, "datum_id": "d1015", "utterance_id": "d1015", "is_unannotated": true}
{"steps": [], "utterance": "I have a meeting with Jack and a meeeting with Jim today. If the call with Jim is not before the call with Jack today, then reschedule it to be the case", "plans": null, "datum_id": "d1016", "utterance_id": "d1016", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings scheduled during my vacation next month and if so, decline them and set an out of office message", "plans": null, "datum_id": "d1017", "utterance_id": "d1017", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings with less than 5 attendees next week, cancel them and send an email to Jack saying \"please do not schedule any calls with large groups\"", "plans": null, "datum_id": "d1018", "utterance_id": "d1018", "is_unannotated": true}
{"steps": [], "utterance": "If I have a meeting with the finance team tomorrow, setup some time before the call titled \"prepare financial reports\"", "plans": null, "datum_id": "d1019", "utterance_id": "d1019", "is_unannotated": true}
{"steps": [], "utterance": "Find all the meetings I have with my manager this week that happen in redmond", "plans": null, "datum_id": "d1020", "utterance_id": "d1020", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during my gym time tomorrow, move them to the morning", "plans": null, "datum_id": "d1021", "utterance_id": "d1021", "is_unannotated": true}
{"steps": [], "utterance": "Remove all the meetings on Fridays this quarter, to an earlier day in corresponding week", "plans": null, "datum_id": "d1022", "utterance_id": "d1022", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during my vacation next week, send an email to the attendees informing them of my absence and reschedule the meetings to the following week", "plans": null, "datum_id": "d1023", "utterance_id": "d1023", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings with the Jason this month. If not, schedule a meeting for the last Friday of the month", "plans": null, "datum_id": "d1024", "utterance_id": "d1024", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled after 5 pm today, move them to the same time tomorrow", "plans": null, "datum_id": "d1025", "utterance_id": "d1025", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings on \"marketing discussion\" scheduled for next week. If not, arrange a meeting for Wednesday at 10 am with Jessica", "plans": null, "datum_id": "d1026", "utterance_id": "d1026", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings about legal review scheduled in this month, move them to the following month at the same time", "plans": null, "datum_id": "d1027", "utterance_id": "d1027", "is_unannotated": true}
{"steps": [], "utterance": "Find the email with the subject \"Project Proposal\" and forward it to my manager", "plans": null, "datum_id": "d1028", "utterance_id": "d1028", "is_unannotated": true}
{"steps": [], "utterance": "Forward this email to attendees of the standup who declined the even", "plans": null, "datum_id": "d1029", "utterance_id": "d1029", "is_unannotated": true}
{"steps": [], "utterance": "Find out who among my reports are attending the annual conference and schedule a meeting with them.", "plans": null, "datum_id": "d1030", "utterance_id": "d1030", "is_unannotated": true}
{"steps": [], "utterance": "Send a thank you note to all attendees of the project completion meeting", "plans": null, "datum_id": "d1031", "utterance_id": "d1031", "is_unannotated": true}
{"steps": [], "utterance": "Schedule a performance review meeting with each of my reports next month", "plans": null, "datum_id": "d1032", "utterance_id": "d1032", "is_unannotated": true}
{"steps": [], "utterance": "Send an email to all attendees of tomorrow's meeting with the updated presentation slides", "plans": null, "datum_id": "d1033", "utterance_id": "d1033", "is_unannotated": true}
{"steps": [], "utterance": "Cancel all my meetings for the day after I return from vacation", "plans": null, "datum_id": "d1034", "utterance_id": "d1034", "is_unannotated": true}
{"steps": [], "utterance": "Rename all the preparation meetings this week to append \"Urgent\"", "plans": null, "datum_id": "d1035", "utterance_id": "d1035", "is_unannotated": true}
{"steps": [], "utterance": "Find the team overview meetings with my team next week and add a 15-minute buffer time before and after it", "plans": null, "datum_id": "d1036", "utterance_id": "d1036", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings scheduled during my flight to New York next Monday and if so, reschedule them to the following day", "plans": null, "datum_id": "d1037", "utterance_id": "d1037", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings scheduled during my vacation next week and if so, decline them", "plans": null, "datum_id": "d1038", "utterance_id": "d1038", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings scheduled during my gym time tomorrow and if so, reschedule them to the evening", "plans": null, "datum_id": "d1039", "utterance_id": "d1039", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings scheduled during my yoga class on Wednesday and if so, decline them", "plans": null, "datum_id": "d1040", "utterance_id": "d1040", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during my vacation next week, please cancel them and send an apology email to the attendees", "plans": null, "datum_id": "d1041", "utterance_id": "d1041", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings with more than 10 attendees next week, please reschedule them to the following week", "plans": null, "datum_id": "d1042", "utterance_id": "d1042", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled after 5 PM today, please reschedule them to tomorrow morning", "plans": null, "datum_id": "d1043", "utterance_id": "d1043", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled with John next week, please cancel them and schedule a new one with him the following week", "plans": null, "datum_id": "d1044", "utterance_id": "d1044", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled with my team today, please order lunch for everyone", "plans": null, "datum_id": "d1045", "utterance_id": "d1045", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during my lunch break from 12 pm to 1 pm next week, reschedule them to the afternoon", "plans": null, "datum_id": "d1046", "utterance_id": "d1046", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled with John next week, send him an email with the subject \"Agenda for our meeting\"", "plans": null, "datum_id": "d1047", "utterance_id": "d1047", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled after 6 pm next week, send a reschedule request to the organizer", "plans": null, "datum_id": "d1048", "utterance_id": "d1048", "is_unannotated": true}
{"steps": [], "utterance": "Find all the meetings I have with the HR team next week and send a reminder email to all attendees 1 day before the meeting", "plans": null, "datum_id": "d1049", "utterance_id": "d1049", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during my gym time from 7 am to 8 am next week, reschedule them to the afternoon", "plans": null, "datum_id": "d1050", "utterance_id": "d1050", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled with Sarah next week, send her an email with the subject \"Agenda for our meeting\"", "plans": null, "datum_id": "d1051", "utterance_id": "d1051", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled after 5 pm next week, send a reschedule request to the organizer", "plans": null, "datum_id": "d1052", "utterance_id": "d1052", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled during my lunch break, move them to the afternoon", "plans": null, "datum_id": "d1053", "utterance_id": "d1053", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled with John next week, move them to the following week", "plans": null, "datum_id": "d1054", "utterance_id": "d1054", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled after 5pm, decline them", "plans": null, "datum_id": "d1055", "utterance_id": "d1055", "is_unannotated": true}
{"steps": [], "utterance": "Decline any meetings scheduled during my vacation next wee", "plans": null, "datum_id": "d1056", "utterance_id": "d1056", "is_unannotated": true}
{"steps": [], "utterance": "Cancel meetings today that have less than 3 attendees who accepte", "plans": null, "datum_id": "d1057", "utterance_id": "d1057", "is_unannotated": true}
{"steps": [], "utterance": "Find all the meetings I have with my manager's skip manager next week and move them to the following week at the same time", "plans": null, "datum_id": "d1058", "utterance_id": "d1058", "is_unannotated": true}
{"steps": [], "utterance": "Check if I have any meetings scheduled during my vacation next month and if so, decline them", "plans": null, "datum_id": "d1059", "utterance_id": "d1059", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during my vacation next week, reschedule the ones about project sync to happen after vacation and cancel the remaining one", "plans": null, "datum_id": "d1060", "utterance_id": "d1060", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled after 6 pm, move them to the next available slot in the morning", "plans": null, "datum_id": "d1061", "utterance_id": "d1061", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings with more than 10 attendees, update the meeting to include my manage", "plans": null, "datum_id": "d1062", "utterance_id": "d1062", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during lunch time which is 12 - 1 PM  today, send an email to the attendees to bring their lunch", "plans": null, "datum_id": "d1063", "utterance_id": "d1063", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings with the HR team next week, add a reminder event an hour before each meetin", "plans": null, "datum_id": "d1064", "utterance_id": "d1064", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled for tomorrow that are longer than 2 hours, shorten them to 90 minutes", "plans": null, "datum_id": "d1065", "utterance_id": "d1065", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled for next week that have location as \"default\", set the location to the main conference room", "plans": null, "datum_id": "d1066", "utterance_id": "d1066", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled for today that I haven't accepted yet, accept them and send a message to the organizer saying I will be attending", "plans": null, "datum_id": "d1067", "utterance_id": "d1067", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled for this week that I am not the organizer of, send a message to the organizer asking for the meeting agenda", "plans": null, "datum_id": "d1068", "utterance_id": "d1068", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled for tomorrow that have more than 10 attendees, send a message to all attendees reminding them to time their content appropriately", "plans": null, "datum_id": "d1069", "utterance_id": "d1069", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings scheduled for this week that have \"default\" meeting location, set the meeting location to \"Teams meeting id 12345\"", "plans": null, "datum_id": "d1070", "utterance_id": "d1070", "is_unannotated": true}
{"steps": [], "utterance": "If there are any meetings titled \"project sync\" scheduled for next week, set the meeting description of each of them to be \"roundtable updates on project progress\"", "plans": null, "datum_id": "d1071", "utterance_id": "d1071", "is_unannotated": true}
{"steps": [], "utterance": "If I have a meeting tomorrow where at least one person has \"sales\" in their job title, then create a meeting with John to go over the sales numbers", "plans": null, "datum_id": "d1072", "utterance_id": "d1072", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings with John next week, move each of them to this week at the same day and time", "plans": null, "datum_id": "d1073", "utterance_id": "d1073", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled on this weekend, decline the", "plans": null, "datum_id": "d1074", "utterance_id": "d1074", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled with the IT team, add a reminder event to bring my laptop", "plans": null, "datum_id": "d1075", "utterance_id": "d1075", "is_unannotated": true}
{"steps": [], "utterance": "Schedule a team lunch for the first Friday of next month and send out invites", "plans": null, "datum_id": "d1076", "utterance_id": "d1076", "is_unannotated": true}
{"steps": [], "utterance": "Find a day next week where I have no meetings and schedule a personal day off", "plans": null, "datum_id": "d1077", "utterance_id": "d1077", "is_unannotated": true}
{"steps": [], "utterance": "Schedule a follow-up meeting with the same attendees as the project meeting last week", "plans": null, "datum_id": "d1078", "utterance_id": "d1078", "is_unannotated": true}
{"steps": [], "utterance": "Send an email to all my reports reminding them of the deadline for the project", "plans": null, "datum_id": "d1079", "utterance_id": "d1079", "is_unannotated": true}
{"steps": [], "utterance": "If any of my reports have not responded to the team meeting invite, send them a reminder", "plans": null, "datum_id": "d1080", "utterance_id": "d1080", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meeting tomorrow with all of my 10 reports about retrospectives. Cancel that one and instead create two smaller meetings with 5 attendees each", "plans": null, "datum_id": "d1081", "utterance_id": "d1081", "is_unannotated": true}
{"steps": [], "utterance": "If I have any meetings scheduled during my vacation, add my deputy John to those calls if he is not already present", "plans": null, "datum_id": "d1082", "utterance_id": "d1082", "is_unannotated": true}
{"steps": [], "utterance": "For my reports who have not accepted the invite for the training session, send them an email requesting them to respond to the meeting invite", "plans": null, "datum_id": "d1083", "utterance_id": "d1083", "is_unannotated": true}
